generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Level {
  BASICO
  INTERMEDIO
  AVANZADO
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(STUDENT)

  accounts      Account[]
  sessions      Session[]
  videos        Video[]    @relation("InstructorVideos")
  favorites     Favorite[]
  progress      Progress[]
  subscription  Subscription?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Video {
  id             String   @id @default(cuid())
  title          String
  description    String
  categoryId     String?
  category       Category? @relation(fields: [categoryId], references: [id])
  level          Level     @default(BASICO)
  published      Boolean   @default(false)

  muxAssetId     String?
  muxPlaybackId  String?
  durationSec    Int?
  thumbnailUrl   String?

  instructorId   String?
  instructor     User?     @relation("InstructorVideos", fields: [instructorId], references: [id])

  tags           VideoTag[]
  favorites      Favorite[]
  progress       Progress[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([published])
  @@index([categoryId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  videos    VideoTag[]
}

model VideoTag {
  videoId String
  tagId   String
  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([videoId, tagId])
}

model Favorite {
  userId  String
  videoId String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, videoId])
}

model Progress {
  userId  String
  videoId String
  seconds Int      @default(0)
  percent Int      @default(0)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt

  @@id([userId, videoId])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  status               String
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  priceId              String?
  currentPeriodEnd     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}
